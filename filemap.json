{
  "project": {
    "name": "VSCode Prolog Toolkit",
    "version": "1.3.0",
    "description": "Advanced Prolog language support, debugging, and tooling for Visual Studio Code",
    "main_entry_point": "src/extension.ts"
  },
  "structure": {
    "core_files": {
      "src/extension.ts": {
        "type": "entry_point",
        "description": "Main extension entry point, handles activation and initialization",
        "dependencies": [
          "prologBackend.ts",
          "features/*",
          "modules/*"
        ]
      },
      "src/prologBackend.ts": {
        "type": "backend_core",
        "description": "Core Prolog backend communication layer, handles queries and process management",
        "key_features": [
          "query execution",
          "process management",
          "streaming support"
        ]
      },
      "src/formatHelpResponse.ts": {
        "type": "utility",
        "description": "Formats help responses from Prolog backend for display"
      },
      "package.json": {
        "type": "configuration",
        "description": "NPM package configuration with extension metadata, commands, and build scripts",
        "build_scripts": {
          "esbuild-base": "Bundles TypeScript files using esbuild",
          "vscode:prepublish": "Pre-publish build process with minification"
        }
      }
    },
    "features": {
      "language_support": {
        "src/features/prologFormatter.ts": {
          "description": "Formats Prolog code according to style guidelines"
        },
        "src/features/definitionProvider.ts": {
          "description": "Provides go-to-definition functionality for Prolog predicates"
        },
        "src/features/hoverProvider.ts": {
          "description": "Shows hover information and documentation for predicates"
        },
        "src/features/referenceProvider.ts": {
          "description": "Finds all references to Prolog predicates"
        },
        "src/features/documentHighlightProvider.ts": {
          "description": "Highlights related symbols in the current document"
        }
      },
      "debugging": {
        "src/features/prologDebugger.ts": {
          "description": "Main debugger implementation for Prolog programs",
          "output": "out/pub/features/prologDebugger.js"
        },
        "src/features/prologDebugSession.ts": {
          "description": "Debug adapter protocol implementation for Prolog debugging",
          "output": "out/pub/features/prologDebugSession.js"
        }
      },
      "lsp_server": {
        "src/features/prologLSPServerRefactored.ts": {
          "description": "Complete Language Server Protocol implementation for Prolog",
          "type": "lsp_server",
          "output": "out/pub/features/prologLSPServerRefactored.js",
          "note": "Replaced missing prologLSPServer.ts in build configuration"
        },
        "src/features/prologLSPExtension.ts": {
          "description": "VSCode extension integration for LSP features"
        },
        "src/features/prologLSPClient.ts": {
          "description": "Language Server Protocol client implementation"
        }
      },
      "ui_components": {
        "src/features/prologDashboardProvider.ts": {
          "description": "Provides dashboard webview for extension overview and controls. NOTE: Must be registered in extension.ts using window.registerWebviewViewProvider with the correct view ID as in package.json."
        },
        "src/features/prologActivityProvider.ts": {
          "description": "Manages activity bar integration and Prolog-specific views. NOTE: Must be registered in extension.ts using window.createTreeView or window.registerTreeDataProvider with the correct view ID as in package.json."
        },
        "src/features/settingsWebviewProvider.ts": {
          "description": "Custom settings interface with enhanced configuration options. NOTE: Must be registered in extension.ts if contributed as a view."
        },
        "src/features/uiHandler.ts": {
          "description": "Handles general UI interactions and user feedback"
        }
      },
      "api_server": {
        "src/features/apiServer.ts": {
          "description": "HTTP API server for external tool integration and AI agent access"
        },
        "src/features/apiRoutes.ts": {
          "description": "Defines API endpoints and routing logic"
        },
        "src/features/apiMiddleware.ts": {
          "description": "Authentication, logging, and security middleware for API requests"
        },
        "src/features/securityManager.ts": {
          "description": "Handles security policies, authentication, and access control"
        },
        "src/features/securityAuditor.ts": {
          "description": "Audits security events and monitors for suspicious activities"
        }
      },
      "query_management": {
        "src/features/queryHistoryManager.ts": {
          "description": "Manages query execution history and provides replay functionality"
        },
        "src/features/queryNotificationManager.ts": {
          "description": "Handles real-time notifications for query execution and results"
        },
        "src/features/queryScheduler.ts": {
          "description": "Schedules and manages concurrent query execution"
        },
        "src/features/concurrencyManager.ts": {
          "description": "Manages concurrent operations and resource allocation"
        },
        "src/features/streamingHandler.ts": {
          "description": "Handles streaming query results and real-time data processing"
        }
      },
      "package_management": {
        "src/features/prologPackageManager.ts": {
          "description": "Manages Prolog packages, dependencies, and library integration"
        },
        "src/features/prologPackageCommands.ts": {
          "description": "Command implementations for package management operations"
        },
        "src/features/packageManagerIntegration.ts": {
          "description": "Integrates with external package managers and repositories"
        }
      },
      "installation_setup": {
        "src/features/installationChecker.ts": {
          "description": "Verifies Prolog installation and system requirements"
        },
        "src/features/installationGuide.ts": {
          "description": "Provides guided installation process and troubleshooting"
        }
      },
      "utilities": {
        "src/features/configurationMigration.ts": {
          "description": "Handles migration of settings between extension versions"
        },
        "src/features/errorHandler.ts": {
          "description": "Centralized error handling and user-friendly error reporting"
        },
        "src/features/outputFormatter.ts": {
          "description": "Formats output messages and results for display"
        },
        "src/features/sessionManager.ts": {
          "description": "Manages Prolog session lifecycle and state"
        },
        "src/features/prologTerminal.ts": {
          "description": "Integrated terminal support for Prolog interactions"
        },
        "src/features/prologRefactor.ts": {
          "description": "Code refactoring tools and transformations"
        },
        "src/features/editHelpers.ts": {
          "description": "Utilities for text editing and code manipulation"
        },
        "src/features/updateSnippets.ts": {
          "description": "Updates and manages code snippets"
        },
        "src/features/localization.ts": {
          "description": "Internationalization and localization support"
        },
        "src/features/multiIDESupport.ts": {
          "description": "Cross-platform IDE compatibility layer"
        },
        "src/features/externalWebSocketManager.ts": {
          "description": "Manages WebSocket connections for external integrations"
        }
      }
    },
    "lsp_providers": {
      "src/features/lsp/": {
        "description": "Language Server Protocol provider implementations",
        "files": {
          "index.ts": "Main LSP module exports and factory functions",
          "types.ts": "TypeScript interfaces and types for LSP implementation",
          "configurationManager.ts": "Manages LSP server configuration and settings",
          "validationProvider.ts": "Provides syntax and semantic validation",
          "completionProvider.ts": "Auto-completion and IntelliSense support",
          "hoverProvider.ts": "Hover information and quick documentation",
          "codeActionsProvider.ts": "Quick fixes and refactoring suggestions",
          "executeCommandHandler.ts": "Handles custom LSP commands execution",
          "definitionProvider.ts": "Go-to-definition functionality",
          "symbolProvider.ts": "Document and workspace symbol navigation",
          "referencesProvider.ts": "Find references and document highlights",
          "signatureProvider.ts": "Function signature help",
          "formattingProvider.ts": "Document and range formatting",
          "renameProvider.ts": "Symbol renaming with validation",
          "foldingProvider.ts": "Code folding and structure outlining",
          "semanticTokensProvider.ts": "Semantic syntax highlighting"
        }
      }
    },
    "linting": {
      "src/features/linting/": {
        "description": "Linting and code quality analysis",
        "files": {
          "index.ts": "Main linting module exports",
          "interfaces.ts": "Linting-specific type definitions",
          "prologLinter.ts": "Core Prolog code analysis engine",
          "diagnosticParser.ts": "Parses and formats diagnostic messages",
          "codeActionProvider.ts": "Quick fixes for linting issues",
          "commandManager.ts": "Manages linting-related commands",
          "configurationManager.ts": "Linting configuration management",
          "navigationProvider.ts": "Navigate between errors and warnings",
          "processExecutor.ts": "Executes external linting tools"
        }
      }
    },
    "modules": {
      "src/modules/": {
        "description": "Core extension modules and managers",
        "files": {
          "extensionManager.ts": "Main extension lifecycle management",
          "configurationManager.ts": "Extension configuration and settings management",
          "installationManager.ts": "Handles Prolog installation detection and setup",
          "chatHandler.ts": "Chat integration and AI assistant functionality",
          "telemetryCollector.ts": "Privacy-respecting usage analytics collection"
        }
      }
    },
    "sdk": {
      "src/sdk/": {
        "description": "Software Development Kit for external integrations",
        "files": {
          "index.ts": "Main SDK exports and public API",
          "types.ts": "SDK-specific type definitions",
          "prologApiClient.ts": "HTTP API client for programmatic access",
          "prologWebSocketClient.ts": "WebSocket client for real-time communication"
        }
      }
    },
    "types": {
      "src/types/": {
        "description": "TypeScript type definitions and interfaces",
        "files": {
          "index.ts": "Main type exports",
          "api.ts": "API-related type definitions",
          "backend.ts": "Backend communication types",
          "configuration.ts": "Configuration and settings types",
          "utils.ts": "Utility type definitions",
          "vscode.ts": "VSCode extension API type extensions"
        }
      }
    },
    "utilities": {
      "src/utils/": {
        "description": "Utility functions and helpers",
        "files": {
          "utils.ts": "General utility functions",
          "errorHandling.ts": "Error handling utilities",
          "platformUtils.ts": "Platform-specific utilities and detection",
          "executableFinder.ts": "Finds Prolog executable across different platforms",
          "safeAccess.ts": "Safe object property access utilities",
          "snippets_from_txt.ecl.ts": "ECLiPSe snippet generation utilities",
          "snippets_from_sources.swi.pl": "SWI-Prolog snippet definitions"
        }
      }
    },
    "prolog_scripts": {
      "src/prolog_json_server.pl": {
        "description": "Prolog-side JSON server for backend communication"
      },
      "src/prolog_pack_manager.pl": {
        "description": "Prolog package management utilities"
      },
      "src/prolog_session_manager.pl": {
        "description": "Prolog session lifecycle management"
      }
    }
  },
  "configuration": {
    "language_files": {
      "prolog.configuration.json": "Language configuration for Prolog syntax",
      "syntaxes/": {
        "description": "TextMate grammar files for syntax highlighting",
        "prolog.tmLanguage.json": "General Prolog syntax highlighting",
        "prolog.swi.tmLanguage.json": "SWI-Prolog specific syntax",
        "prolog.ecl.tmLanguage.json": "ECLiPSe Prolog syntax",
        "prolog.swi.tmLanguage.yaml": "SWI-Prolog YAML source",
        "prolog.ecl.tmLanguage.yaml": "ECLiPSe YAML source"
      }
    },
    "snippets": {
      "snippets/prolog.json": "General Prolog code snippets",
      "snippets/prolog.swi.json": "SWI-Prolog specific snippets",
      "snippets/prolog.ecl.json": "ECLiPSe specific snippets"
    },
    "build_config": {
      "tsconfig.json": "TypeScript compiler configuration",
      "eslint.config.js": "ESLint configuration for code quality",
      ".prettierrc.js": "Code formatting configuration"
    }
  },
  "testing": {
    "test/": {
      "description": "Comprehensive test suite",
      "unit_tests": {
        "prologBackend.test.ts": "Core backend functionality tests",
        "prologBackend.unit.test.ts": "Unit tests for backend components",
        "installationChecker.test.ts": "Installation verification tests",
        "configurationMigration.test.ts": "Settings migration tests",
        "errorHandler.test.ts": "Error handling tests",
        "outputFormatter.test.ts": "Output formatting tests"
      },
      "integration_tests": {
        "lsp-integration.test.ts": "Language Server Protocol integration tests",
        "chat-integration.test.ts": "Chat assistant integration tests",
        "chat-commands-integration.test.ts": "Chat command integration tests",
        "installation-integration.test.ts": "Installation process integration tests",
        "step4-integration.test.ts": "Multi-step integration test scenarios"
      },
      "specialized_tests": {
        "n3-integration.test.ts": "N3/RDF semantic web integration tests",
        "advanced-concurrency.test.ts": "Concurrent operation tests",
        "performance-scalability.test.ts": "Performance and scalability tests",
        "enhanced-reasoning.test.ts": "Enhanced reasoning capability tests",
        "session-management.test.ts": "Session lifecycle management tests"
      },
      "platform_tests": {
        "platform/linux.test.ts": "Linux-specific functionality tests",
        "platform/macos.test.ts": "macOS-specific functionality tests",
        "platform/windows.test.ts": "Windows-specific functionality tests"
      },
      "validation": {
        "validation/smoke-tests.js": "Basic functionality smoke tests",
        "validation/activity-bar-tests.js": "Activity bar UI tests",
        "validation/platform-tests.js": "Cross-platform validation tests",
        "validation/vsix-installation-test.js": "Extension package installation tests"
      },
      "resources": {
        "resources/sample-basic.pl": "Basic Prolog test file",
        "resources/sample-complex.pl": "Complex Prolog test scenarios",
        "resources/sample.n3": "N3 semantic web test data",
        "resources/complex.n3": "Complex N3 reasoning test data"
      }
    }
  },
  "assets": {
    "images/": {
      "description": "Extension icons and demonstration GIFs",
      "vsplogo.png": "Main extension logo",
      "prolog-activity-icon.svg": "Activity bar icon",
      "demo_gifs": [
        "debug.gif",
        "syntax.gif",
        "format.gif",
        "linter.gif",
        "hover.gif",
        "gotodef.gif",
        "refactoring.gif",
        "snippets.gif"
      ]
    },
    "media/": {
      "dashboard.css": "Dashboard webview styling",
      "settings.css": "Settings UI styling",
      "settings.js": "Settings UI JavaScript functionality"
    }
  },
  "documentation": {
    "README.md": "Main project documentation and usage guide",
    "CHANGELOG.md": "Version history and feature changes",
    "CONTRIBUTING.md": "Contribution guidelines for developers",
    "LICENSE": "MIT license file",
    "docs/": {
      "description": "Additional documentation",
      "troubleshooting.md": "Common issues and solutions",
      "performance-scalability.md": "Performance optimization guide",
      "openapi.yaml": "API specification for HTTP endpoints"
    }
  },
  "mcp_server": {
    "mcp-server/": {
      "description": "Model Context Protocol server for AI integration",
      "src/index.ts": "MCP server implementation",
      "package.json": "MCP server dependencies and configuration",
      "claude-desktop-config.json": "Claude AI integration configuration"
    }
  },
  "build_output": {
    "out/pub/": {
      "description": "Compiled JavaScript output directory",
      "extension.js": "Main extension bundle (2.4mb)",
      "features/prologLSPServerRefactored.js": "LSP server bundle (609.6kb)",
      "features/prologDebugSession.js": "Debug adapter bundle (214.1kb)",
      "features/prologDebugger.js": "Debugger implementation bundle (214.1kb)"
    }
  },
  "development": {
    "scripts/": {
      "description": "Development and build scripts",
      "precommit.js": "Pre-commit hooks and validation",
      "validate-tests.js": "Test validation utilities",
      "version-bump.js": "Automated version management"
    },
    "BuildHelpers/": {
      "description": "Build assistance and documentation",
      "implementationsteps.json": "Implementation roadmap",
      "potentialEnhancements.json": "Future enhancement proposals"
    }
  },
  "demo_cases": {
    "demo-use-cases/": {
      "description": "Demonstration scenarios and examples",
      "basic-development-demos/": "Basic Prolog development workflows",
      "debugging-demos/": "Debugging feature demonstrations",
      "chat-assistant-demos/": "AI chat assistant examples",
      "activity-bar-dashboard-demos/": "UI component demonstrations"
    },
    "extension-test-cases/": {
      "description": "Structured test scenarios and validation cases",
      "test-suite-summary.md": "Complete test coverage overview"
    }
  },
  "metadata": {
    "analysis_notes": {
      "missing_files_fixed": [
        {
          "issue": "prologLSPServer.ts referenced in build but didn't exist",
          "solution": "Updated esbuild-base script to use prologLSPServerRefactored.ts",
          "impact": "Build process now works correctly"
        }
      ],
      "architectural_patterns": {
        "core_backend": "Centralized Prolog process management through prologBackend.ts",
        "feature_modules": "Modular feature organization under src/features/",
        "lsp_implementation": "Complete LSP server with modular providers",
        "api_integration": "RESTful API and WebSocket support for external tools",
        "testing_strategy": "Comprehensive unit, integration, and platform-specific tests"
      },
      "build_process": {
        "bundler": "esbuild",
        "entry_points": [
          "src/extension.ts",
          "src/features/prologDebugSession.ts",
          "src/features/prologDebugger.ts",
          "src/features/prologLSPServerRefactored.ts"
        ],
        "output_format": "CommonJS modules for VSCode compatibility",
        "note": "If targeting web/remote, avoid Node.js built-ins in code that runs in the web extension host."
      }
    }
  }
}