{
  "vim_script": "\n\" Vim-LSP configuration for Prolog\nif executable('node')\n  augroup LspProlog\n    autocmd!\n    autocmd User lsp_setup call lsp#register_server({\n      \\ 'name': 'prolog-lsp',\n      \\ 'cmd': {server_info->['node', './out/pub/features/prologLSPServer.js', '--stdio']},\n      \\ 'allowlist': ['prolog'],\n      \\ 'root_uri': {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), ['.git', '*.pl', '*.pro']))},\n      \\ })\n  augroup END\nendif\n\n\" Prolog filetype detection\naugroup PrologFiletype\n  autocmd!\n  autocmd BufRead,BufNewFile *.pl,*.pro,*.prolog,*.plt,*.ecl set filetype=prolog\naugroup END\n\n\" Key mappings for LSP\nfunction! s:on_lsp_buffer_enabled() abort\n  setlocal omnifunc=lsp#complete\n  setlocal signcolumn=yes\n  if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif\n  nmap <buffer> gd <plug>(lsp-definition)\n  nmap <buffer> gs <plug>(lsp-document-symbol-search)\n  nmap <buffer> gS <plug>(lsp-workspace-symbol-search)\n  nmap <buffer> gr <plug>(lsp-references)\n  nmap <buffer> gi <plug>(lsp-implementation)\n  nmap <buffer> gt <plug>(lsp-type-definition)\n  nmap <buffer> <leader>rn <plug>(lsp-rename)\n  nmap <buffer> [g <plug>(lsp-previous-diagnostic)\n  nmap <buffer> ]g <plug>(lsp-next-diagnostic)\n  nmap <buffer> K <plug>(lsp-hover)\nendfunction\n\naugroup lsp_install\n  au!\n  autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()\naugroup END\n      "
}