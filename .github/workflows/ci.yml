name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18.x, 20.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install SWI-Prolog (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y software-properties-common
        sudo apt-add-repository ppa:swi-prolog/stable
        sudo apt-get update
        sudo apt-get install -y swi-prolog
        
    - name: Install SWI-Prolog (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install swi-prolog
        
    - name: Install SWI-Prolog (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install swi-prolog
        
    - name: Verify SWI-Prolog installation
      run: swipl --version
      
    - name: Install dependencies
      run: npm ci
      
    - name: Setup test environment
      run: npm run setup-test-env
      
    - name: Run linting
      run: npm run lint
      
    - name: Run formatting check
      run: npm run format:check
      
    - name: Run unit tests
      run: npm run test
      
    - name: Run platform-specific tests
      run: npm run test:platform
      
    - name: Run integration tests
      run: npm run test:all
      
    - name: Run N3 integration tests
      run: npm run test:n3
      
    - name: Run performance tests
      run: npm run test:performance
      
    - name: Run test coverage
      run: npm run test:coverage
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-${{ matrix.os }}-node${{ matrix.node-version }}
        
    - name: Archive test logs
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: test-logs-${{ matrix.os }}-node${{ matrix.node-version }}
        path: test/logs/
        
    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.os }}-node${{ matrix.node-version }}
        path: |
          test/logs/*.json
          coverage/
          
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      
  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build extension
      run: npm run build
      
    - name: Package extension
      run: npm run package
      
    - name: Archive build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: extension-package
        path: '*.vsix'
        
  release:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build and package
      run: |
        npm run build
        npm run package
        
    - name: Create Release
      id: create_release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./new-vsc-prolog-*.vsix
        asset_name: new-vsc-prolog-${{ github.ref_name }}.vsix
        asset_content_type: application/zip